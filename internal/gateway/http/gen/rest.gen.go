//go:build go1.22

// Package genapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package genapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new author
	// (POST /authors)
	PostAuthors(w http.ResponseWriter, r *http.Request)
	// Get a list of recipes by a specific author with pagination
	// (GET /authors/{author_id}/recipes)
	GetAuthorsAuthorIdRecipes(w http.ResponseWriter, r *http.Request, authorId openapi_types.UUID, params GetAuthorsAuthorIdRecipesParams)
	// Get a list of recipes with pagination
	// (GET /recipes)
	GetRecipes(w http.ResponseWriter, r *http.Request, params GetRecipesParams)
	// Create a new recipe
	// (POST /recipes)
	PostRecipes(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAuthors operation middleware
func (siw *ServerInterfaceWrapper) PostAuthors(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthors(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAuthorsAuthorIdRecipes operation middleware
func (siw *ServerInterfaceWrapper) GetAuthorsAuthorIdRecipes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "author_id" -------------
	var authorId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "author_id", r.PathValue("author_id"), &authorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "author_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthorsAuthorIdRecipesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthorsAuthorIdRecipes(w, r, authorId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRecipes operation middleware
func (siw *ServerInterfaceWrapper) GetRecipes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRecipesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRecipes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRecipes operation middleware
func (siw *ServerInterfaceWrapper) PostRecipes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRecipes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/authors", wrapper.PostAuthors)
	m.HandleFunc("GET "+options.BaseURL+"/authors/{author_id}/recipes", wrapper.GetAuthorsAuthorIdRecipes)
	m.HandleFunc("GET "+options.BaseURL+"/recipes", wrapper.GetRecipes)
	m.HandleFunc("POST "+options.BaseURL+"/recipes", wrapper.PostRecipes)

	return m
}

type PostAuthorsRequestObject struct {
	Body *PostAuthorsJSONRequestBody
}

type PostAuthorsResponseObject interface {
	VisitPostAuthorsResponse(w http.ResponseWriter) error
}

type PostAuthors201JSONResponse Author

func (response PostAuthors201JSONResponse) VisitPostAuthorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthors400JSONResponse ErrorResponse

func (response PostAuthors400JSONResponse) VisitPostAuthorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthors401JSONResponse ErrorResponse

func (response PostAuthors401JSONResponse) VisitPostAuthorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthors500JSONResponse ErrorResponse

func (response PostAuthors500JSONResponse) VisitPostAuthorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthorsAuthorIdRecipesRequestObject struct {
	AuthorId openapi_types.UUID `json:"author_id"`
	Params   GetAuthorsAuthorIdRecipesParams
}

type GetAuthorsAuthorIdRecipesResponseObject interface {
	VisitGetAuthorsAuthorIdRecipesResponse(w http.ResponseWriter) error
}

type GetAuthorsAuthorIdRecipes200JSONResponse struct {
	Recipes *[]Recipe `json:"recipes,omitempty"`

	// Total Total number of recipes available for the author
	Total *int `json:"total,omitempty"`
}

func (response GetAuthorsAuthorIdRecipes200JSONResponse) VisitGetAuthorsAuthorIdRecipesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthorsAuthorIdRecipes400JSONResponse ErrorResponse

func (response GetAuthorsAuthorIdRecipes400JSONResponse) VisitGetAuthorsAuthorIdRecipesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthorsAuthorIdRecipes404JSONResponse ErrorResponse

func (response GetAuthorsAuthorIdRecipes404JSONResponse) VisitGetAuthorsAuthorIdRecipesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthorsAuthorIdRecipes500JSONResponse ErrorResponse

func (response GetAuthorsAuthorIdRecipes500JSONResponse) VisitGetAuthorsAuthorIdRecipesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRecipesRequestObject struct {
	Params GetRecipesParams
}

type GetRecipesResponseObject interface {
	VisitGetRecipesResponse(w http.ResponseWriter) error
}

type GetRecipes200JSONResponse struct {
	Recipes *[]Recipe `json:"recipes,omitempty"`

	// Total Total number of recipes available
	Total *int `json:"total,omitempty"`
}

func (response GetRecipes200JSONResponse) VisitGetRecipesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRecipes400JSONResponse ErrorResponse

func (response GetRecipes400JSONResponse) VisitGetRecipesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRecipes500JSONResponse ErrorResponse

func (response GetRecipes500JSONResponse) VisitGetRecipesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostRecipesRequestObject struct {
	Body *PostRecipesJSONRequestBody
}

type PostRecipesResponseObject interface {
	VisitPostRecipesResponse(w http.ResponseWriter) error
}

type PostRecipes201JSONResponse Recipe

func (response PostRecipes201JSONResponse) VisitPostRecipesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostRecipes400JSONResponse ErrorResponse

func (response PostRecipes400JSONResponse) VisitPostRecipesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostRecipes401JSONResponse ErrorResponse

func (response PostRecipes401JSONResponse) VisitPostRecipesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostRecipes500JSONResponse ErrorResponse

func (response PostRecipes500JSONResponse) VisitPostRecipesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new author
	// (POST /authors)
	PostAuthors(ctx context.Context, request PostAuthorsRequestObject) (PostAuthorsResponseObject, error)
	// Get a list of recipes by a specific author with pagination
	// (GET /authors/{author_id}/recipes)
	GetAuthorsAuthorIdRecipes(ctx context.Context, request GetAuthorsAuthorIdRecipesRequestObject) (GetAuthorsAuthorIdRecipesResponseObject, error)
	// Get a list of recipes with pagination
	// (GET /recipes)
	GetRecipes(ctx context.Context, request GetRecipesRequestObject) (GetRecipesResponseObject, error)
	// Create a new recipe
	// (POST /recipes)
	PostRecipes(ctx context.Context, request PostRecipesRequestObject) (PostRecipesResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostAuthors operation middleware
func (sh *strictHandler) PostAuthors(w http.ResponseWriter, r *http.Request) {
	var request PostAuthorsRequestObject

	var body PostAuthorsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthors(ctx, request.(PostAuthorsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthors")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAuthorsResponseObject); ok {
		if err := validResponse.VisitPostAuthorsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAuthorsAuthorIdRecipes operation middleware
func (sh *strictHandler) GetAuthorsAuthorIdRecipes(w http.ResponseWriter, r *http.Request, authorId openapi_types.UUID, params GetAuthorsAuthorIdRecipesParams) {
	var request GetAuthorsAuthorIdRecipesRequestObject

	request.AuthorId = authorId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthorsAuthorIdRecipes(ctx, request.(GetAuthorsAuthorIdRecipesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthorsAuthorIdRecipes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAuthorsAuthorIdRecipesResponseObject); ok {
		if err := validResponse.VisitGetAuthorsAuthorIdRecipesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRecipes operation middleware
func (sh *strictHandler) GetRecipes(w http.ResponseWriter, r *http.Request, params GetRecipesParams) {
	var request GetRecipesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRecipes(ctx, request.(GetRecipesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRecipes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRecipesResponseObject); ok {
		if err := validResponse.VisitGetRecipesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRecipes operation middleware
func (sh *strictHandler) PostRecipes(w http.ResponseWriter, r *http.Request) {
	var request PostRecipesRequestObject

	var body PostRecipesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRecipes(ctx, request.(PostRecipesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRecipes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRecipesResponseObject); ok {
		if err := validResponse.VisitPostRecipesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
