name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: "cr.selcloud.ru/registry"
  IMAGE_NAME: "go-recipe"
  CONTAINER_NAME: "go-recipe-container"

jobs:
  image-build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        run: docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY

      - name: Create config/.env file
        run: |
          touch config/.env
          echo TOKEN_HASH=${{ secrets.TOKEN_HASH }} >> config/.env
          echo DB_HOST=${{ secrets.DB_HOST }} >> config/.env
          echo DB_PORT=${{ secrets.DB_PORT }} >> config/.env
          echo DB_USER=${{ secrets.DB_USER }} >> config/.env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> config/.env
          echo DB_NAME=${{ secrets.DB_NAME }} >> config/.env

      - name: Build and Push Docker Image
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker buildx create --use
          docker buildx build --no-cache --push --tag $REGISTRY/$IMAGE_NAME:$TAG_NAME --file ./prod.Dockerfile .

  deploy-image:
    runs-on: ubuntu-latest
    needs: image-build-and-push

    steps:
      - name: Deploy to Selectel Cloud via SSH action
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSHKEY }}
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,CONTAINER_NAME
          script: |
            # Set up variables
            TAG_NAME=$(echo $GITHUB_SHA | head -c7)
            
            # Login into Selectel Registry
            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY
            
            # Stop running container
            docker stop $CONTAINER_NAME
            
            # Remove old container
            docker rm $CONTAINER_NAME
            
            # Run a new container from a new image
            docker run -d -p 1235:1235 --name $CONTAINER_NAME --network=pg --network=redis -t $REGISTRY/$IMAGE_NAME:$TAG_NAME